package pre.propertiesEx2;

import java.io.*;
import java.util.*;

public class PropTest {
	
// 메서드
	
	// 메인
	public static void main(String[] args) {
		Properties p = new Properties();
		
		// p.fileSave(); ▶ p 하위에서 추가로 가져오거나 작성할 때 사용한다.
		// 지금은 fileSave 메서드를 따로 만들어줬기 때문에 위 방법은 사용할 수 없다.
		fileSave(p);
		fileOpen(p);
	}
	
	public static void fileSave(Properties p) {
		p.setProperty("1", "순풍산부인과, 1998, 682");
		p.setProperty("2", "똑바로살아라, 2002, 329");
		p.setProperty("3", "눈물의여왕, 2024, 16");
		p.setProperty("4", "아내의유혹, 2008, 129");
		
		// xml : 텍스트 기반의 문서 웹에서 읽기 편하도록 < > 를 사용하여 규칙을 지정해서 작성하는 공간이다.
		
		try {
			FileOutputStream fos = new FileOutputStream("drama.xml"); // Output : 내보낼 때
			p.storeToXML(fos, null); 
			fos.close();
			System.out.println(".xml 파일로 저장 완료");
		} catch (IOException e) {
			
			e.printStackTrace();
		}
	}
	
	public static void fileOpen(Properties p) {
		try {
			FileInputStream fis = new FileInputStream("drama.xml");
			p.loadFromXML(fis); // xml 파일 불러오기
			fis.close();
			
			// Properties 객체에 키-값 쌍을 넣어 List에 저장하기
			List<Drama> dramas = new ArrayList();
			// 데이터가 어떻게 들어있는지 확인할 수 있도록 List를 만들어준 것이다.
			
			// for-each문을 사용하여 설정 파일안에 작성되어 있는 이름을 기준으로 모두 추가하기
			for(String key : p.stringPropertyNames()) { 
	
				// xml 파일 안에 들어있는 모든 값을 문자열 형태로 변환하여, 검색할 수 있도록 만들기
				// 모든 키를 담을 String[] 을 생성하여, key 들을 모두 담아준다. , 기준으로 구분한다.
				String[] values = p.getProperty(key).split(", ");
				
				// 변수에 각각 담아 생성하기
				String 제목 = values[0];
				
				// .setProperty() 안에 작성된 값은 모두 String 이기 때문에,
				// String ▶ int 로 바꿔주어야 한다.
				int 제작년도 = Integer.parseInt(values[1]);
				int 총회차수 = Integer.parseInt(values[2]);
				
				Drama drama = new Drama(제목, 제작년도, 총회차수);
				
				// 각각 담아놓은 drama 를 dramas 에 모두 추가하기
				// 비어있는 dramas List 에 각각의 drama 추가하기
				dramas.add(drama);
				
				System.out.println("===== 드라마 목록 =====");
				for(Drama d : dramas) {
					System.out.println(d);
				}
						
			}
			
		} catch (IOException e) {

			e.printStackTrace();
		}
	}
	
}
